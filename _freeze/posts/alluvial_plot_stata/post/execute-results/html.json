{
  "hash": "8c34cd3c87bfe652f67629c2c3638496",
  "result": {
    "markdown": "---\ntitle: How to Create an Alluvial Plot in Stata\ndate: '2024-03-11'\ncategories:\n  - Stata\n  - plot\n  - alluvial\ndescription: How to draw an Alluvial Plot in Stata with example code.\nexecute:\n  message: false\n  warning: false\neditor_options:\n  chunk_output_type: console\nformat:\n  html:\n    code-fold: true\n    code-summary: Show the code\n---\n\n# Introduction\n\nIn this post, I explain how to create an alluvial plot using code in Stata.\n\n## What is an Alluvial Diagram\n\nAn alluvial diagram or plot displays the flow of information from one categorical variable or stage to the next. The term \"alluvial\" refers to its resemblance to the flow of a river.\n\n## Uses of Alluvial Diagrams\n\nAlluvial diagrams are commonly used in the following situations:\n\n* To demonstrate the number of participants in a study transitioning from one baseline category to a subsequent category. For example, the number of participants randomized at the beginning of the study and who continue to follow-up at the end. It serves as a graphical supplement to flowcharts, which present information with arrows and boxes containing text and numbers.\n* To show the distribution of participants among different categorical variables. In this case, it provides a more \"visually appealing\" alternative to stacked column charts.\n\n# Stata Code\n\n## Preparations\n\nFor this example, we will use the `alluvial` command, which requires the installation of the `palettes` and `colrspace` commands. The data is a simulation of a comparison of two fictional diagnostic tests, called \"Test A\" and \"Test B\", which can take values such as \"1-very low\", \"2-low\", \"3-medium\", \"4-high\", and \"5-very high\".\n\n::: {.cell execution_count=1}\n``` {.stata .cell-code}\n// Install user-written commands\nnet install alluvial, from(\"https://raw.githubusercontent.com/asjadnaqvi/stata-alluvial/main/installation/\") replace\nssc install palettes, replace\nssc install colrspace, replace\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.stata .cell-code}\n// Input data\nclear\n\ninput test_b test_a\n\t4\t4\n\t1\t1\n\t1\t1\n\t2\t2\n\t3\t1\n\t1\t2\n\t3\t2\n\t2\t2\n\t5\t2\n\t3\t1\n\t3\t3\n\t3\t3\n\t5\t3\n\t4\t3\n\t1\t1\n\t3\t3\n\t4\t1\n\t2\t3\n\t5\t2\n\t4\t2\n\t4\t2\n\t2\t1\n\t5\t3\n\t3\t3\n\t5\t1\n\t3\t3\nend\n\n// Label data\n\nlabel var test_a \"Test A\"\nlabel var test_b \"Test B\"\n\nlabel define high_low 1 \"1-very low\" 2 \"2-low\" 3 \"3-medium\" 4 \"4-high\" 5 \"5-very high\", replace\nlabel values test_a test_b high_low\n\n// Tabulate\n\ntab test_a test_b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\n            |                   Test B\n     Test A | 1-very lo      2-low   3-medium     4-high |     Total\n------------+--------------------------------------------+----------\n 1-very low |         3          1          2          1 |         8 \n      2-low |         1          2          1          2 |         8 \n   3-medium |         0          1          5          1 |         9 \n     4-high |         0          0          0          1 |         1 \n------------+--------------------------------------------+----------\n      Total |         4          4          8          5 |        26 \n\n\n            |   Test B\n     Test A | 5-very hi |     Total\n------------+-----------+----------\n 1-very low |         1 |         8 \n      2-low |         2 |         8 \n   3-medium |         2 |         9 \n     4-high |         0 |         1 \n------------+-----------+----------\n      Total |         5 |        26 \n```\n:::\n:::\n\n\nIn this fictional study, a total of 26 people underwent both diagnostic tests. We can see in the table that three people obtained a \"very low\" result in both tests, one person obtained a \"very low\" result in test A and \"low\" in test B, etc.\n\nThe table itself is informative but does not allow for quick and intuitive information extraction. This is where the alluvial plot comes in.\n\n## Alluvial Plot\n\n::: {.cell execution_count=3}\n``` {.stata .cell-code}\n// Alluvial plot\n\nalluvial test_a test_b, palette(RdYlBu, n(5)) labangle(0) novalues boxwidth(5) offset(10) title(\"Alluvial plot of results of Test A vs Test B.\", size(3)) note (\"N = 26\") graphregion(color(white)) showtot lwidth(0.01) lcolor(gray) labpos(3)\n\nqui: graph export fig1.svg, width(1600) replace\n```\n:::\n\n\n![alluvial_plot](fig1.svg)\n\nIn the alluvial diagram, the area of the colored zones is proportional to the frequency, so wider \"flows\" represent more participants.\n\nThe graph shows how there is a considerable \"transfer\" of participants between result levels in the two tests. For example, we see that slightly less than half of those with a \"very low\" result in Test A also obtained \"very low\" in Test B, but others obtained \"low\", \"medium\", \"high\", and even \"very high\" results. We also clearly see how there are no participants with \"very high\" results in Test A, or that the only participant with a \"high\" result in Test A also had a \"high\" result in Test B.\n\nIn conclusion, alluvial diagrams provide a visual option for better understanding data flows between categories.\n\n# References\n\n* [alluvial Stata package](https://github.com/asjadnaqvi/stata-alluvial)\n* [This post explains how to run Stata code using Quarto](https://friosavila.github.io/stata_do/stata_do1.html)\n\n",
    "supporting": [
      "post_files"
    ],
    "filters": [],
    "includes": {}
  }
}