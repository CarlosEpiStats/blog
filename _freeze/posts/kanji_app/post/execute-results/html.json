{
  "hash": "ab60fdd857c2fea29bc731149fde6e17",
  "result": {
    "markdown": "---\ntitle: 'Interactive List of Japanese Words Using R Shiny Apps'\ndate: \"2024-03-06\"\ncategories: ['R', 'shiny', 'exploratory']\ndescription: \"Using R Shiny to interactively explore data, with a Japanese Kanji database example.\"\nexecute: \n  message: false\n  warning: false\n  eval: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Introduction\n\nIn a [previous post](https://carlosepistats.github.io/blog/posts/kanji/post.html), I demonstrated how to use R to load, explore, and filter data from a dataset containing Japanese characters, known as \"kanji\". \n\nToday, we'll focus on making that data exploration interactive using the R package `Shiny`.\n\n# App design\n\nEvery interactive app has at least three components: input, output, and a back-end server. The server transforms the user's input into output. My \"kanji app\" has the following input and output:\n\nInput:\n\n* A list of kanji that the user (that is, me) is currently learning.\n\nOutput:\n\n* A table with all the possible words formed by combination of those kanji, as well as their pronunciation and an English translation. This table can be downloaded in CSV or XLSX format.\n* A table with example sentences that contain words formed by combination of those kanji, as well as their pronunciation and an English translation. \n* A table that displays how many different words contain each of the learning kanji.\n\n\n# Shiny App\n\n::: {.border layout-ncol=\"2\"}\n\n```{=html}\n <iframe id=\"example1\" src=\"https://epistats.shinyapps.io/Kanji_app/\" style=\"border: none; width: 100%; height: 720px\" frameborder=\"0\"></iframe>\n```\n\n\n\n# Code breakdown\n\n\n## Setup and Loading Data\n\nTo begin, we need to load necessary libraries and import the datasets. I'll use six different datasets to form the whole \"dictionary\":\n \n* A list of kanji downloaded from XXX\n* A list of jukugo (words composed by two kanji) downloaded from XXX\n* A list of words obtained from an Anki deck from XXX\n* A list of sentences obtained from an Anki deck from XXX\n* A list of sentences obtained from an Anki deck from XXX\n* A dataset of Japanese numbers from 0 to 100, created manually.\n\nEach dataset contains three columns: `word` (in kanji), `pronunciation` (in hiragana or romaji), and `meaning` (in English).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# | warning: false\n# Loading necessary libraries ####\nlibrary(tidyverse)\n# library(here)\nlibrary(janitor)\nlibrary(readxl)\nlibrary(writexl)\n#library(shiny)\nlibrary(DT)\n\n# Loading datasets ####\n\nfile_kanji <- \"Kanji_20240227_081842.csv\"\nfile_jukugo <- \"Jukugo_20240227_081908.csv\"\nfile_words <- \"Optimized Kore - Sheet1.csv\"\nfile_sentences1 <- \"Sentences.xlsx\"\nfile_sentences2 <- \"Sentences_core.xlsx\"\n\n## Kanji list ####\ndata_kanji <- read.csv2(file_kanji) %>% \n  clean_names()\n\n## Jukugo list ####\ndata_jukugo <- read.csv2(file_jukugo) %>% \n  clean_names() %>% \n  arrange(desc(frequency)) %>% \n  select(comp_word, pronunciation, english_translation) %>%\n  rename(word = comp_word,\n         meaning = english_translation) %>% \n  distinct(word, .keep_all = TRUE) %>% \n  # Change romaji\n  mutate(\n    pronunciation = gsub(\"zi\", \"ji\", pronunciation),\n    pronunciation = gsub(\"zy\", \"jy\", pronunciation),\n    pronunciation = gsub(\"ti\", \"chi\", pronunciation),\n    pronunciation = gsub(\"ty\", \"ch\", pronunciation),\n    pronunciation = gsub(\"si\", \"shi\", pronunciation),\n    pronunciation = gsub(\"sy\", \"shy\", pronunciation),\n    pronunciation = gsub(\"tu\", \"tsu\", pronunciation),\n    pronunciation = gsub(\"hu\", \"fu\", pronunciation)\n    )\n\n## word list ####\ndata_words <- read.csv(file_words) %>% \n  clean_names() %>% \n  arrange(core_index) %>% \n  select(vocab_expression, vocab_kana, vocab_meaning) %>% \n  rename(word = vocab_expression,\n         pronunciation = vocab_kana,\n         meaning = vocab_meaning) %>% \n  distinct(word, .keep_all = TRUE) \n\n## Number list ####\n\ndata_numbers <- data.frame(\n  word = c(\"零\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\", \"十\", \n     \"十一\", \"十二\", \"十三\", \"十四\", \"十五\", \"十六\", \"十七\", \"十八\", \"十九\", \n     \"二十\", \"二十一\", \"二十二\", \"二十三\", \"二十四\", \"二十五\", \"二十六\", \"二十七\", \n     \"二十八\", \"二十九\", \"三十\", \"三十一\", \"三十二\", \"三十三\", \"三十四\", \"三十五\", \n     \"三十六\", \"三十七\", \"三十八\", \"三十九\", \"四十\", \"四十一\", \"四十二\", \"四十三\", \n     \"四十四\", \"四十五\", \"四十六\", \"四十七\", \"四十八\", \"四十九\", \"五十\", \"五十一\", \n     \"五十二\", \"五十三\", \"五十四\", \"五十五\", \"五十六\", \"五十七\", \"五十八\", \"五十九\", \n     \"六十\", \"六十一\", \"六十二\", \"六十三\", \"六十四\", \"六十五\", \"六十六\", \"六十七\", \n     \"六十八\", \"六十九\", \"七十\", \"七十一\", \"七十二\", \"七十三\", \"七十四\", \"七十五\", \n     \"七十六\", \"七十七\", \"七十八\", \"七十九\", \"八十\", \"八十一\", \"八十二\", \"八十三\", \n     \"八十四\", \"八十五\", \"八十六\", \"八十七\", \"八十八\", \"八十九\", \"九十\", \"九十一\", \n     \"九十二\", \"九十三\", \"九十四\", \"九十五\", \"九十六\", \"九十七\", \"九十八\", \"九十九\", \"百\"),\n  pronunciation = c(\"れい\", \"いち\", \"に\", \"さん\", \"し\", \"ご\", \"ろく\", \"しち\", \"はち\", \"きゅう\", \"じゅう\",\n                    \"じゅういち\", \"じゅうに\", \"じゅうさん\", \"じゅうし\", \"じゅうご\", \"じゅうろく\", \"じゅうしち\", \"じゅうはち\", \"じゅうきゅう\",\n                    \"にじゅう\", \"にじゅういち\", \"にじゅうに\", \"にじゅうさん\", \"にじゅうし\", \"にじゅうご\", \"にじゅうろく\", \"にじゅうしち\", \"にじゅうはち\", \"にじゅうきゅう\",\n                    \"さんじゅう\", \"さんじゅういち\", \"さんじゅうに\", \"さんじゅうさん\", \"さんじゅうし\", \"さんじゅうご\", \"さんじゅうろく\", \"さんじゅうしち\", \"さんじゅうはち\", \"さんじゅうきゅう\",\n                    \"よんじゅう\", \"よんじゅういち\", \"よんじゅうに\", \"よんじゅうさん\", \"よんじゅうし\", \"よんじゅうご\", \"よんじゅうろく\", \"よんじゅうしち\", \"よんじゅうはち\", \"よんじゅうきゅう\",\n                    \"ごじゅう\", \"ごじゅういち\", \"ごじゅうに\", \"ごじゅうさん\", \"ごじゅうし\", \"ごじゅうご\", \"ごじゅうろく\", \"ごじゅうしち\", \"ごじゅうはち\", \"ごじゅうきゅう\",\n                    \"ろくじゅう\", \"ろくじゅういち\", \"ろくじゅうに\", \"ろくじゅうさん\", \"ろくじゅうし\", \"ろくじゅうご\", \"ろくじゅうろく\", \"ろくじゅうしち\", \"ろくじゅうはち\", \"ろくじゅうきゅう\",\n                    \"しちじゅう\", \"しちじゅういち\", \"しちじゅうに\", \"しちじゅうさん\", \"しちじゅうし\", \"しちじゅうご\", \"しちじゅうろく\", \"しちじゅうしち\", \"しちじゅうはち\", \"しちじゅうきゅう\",\n                    \"はちじゅう\", \"はちじゅういち\", \"はちじゅうに\", \"はちじゅうさん\", \"はちじゅうし\", \"はちじゅうご\", \"はちじゅうろく\", \"はちじゅうしち\", \"はちじゅうはち\", \"はちじゅうきゅう\",\n                    \"きゅうじゅう\", \"きゅうじゅういち\", \"きゅうじゅうに\", \"きゅうじゅうさん\", \"きゅうじゅうし\", \"きゅうじゅうご\", \"きゅうじゅうろく\", \"きゅうじゅうしち\", \"きゅうじゅうはち\", \"きゅうじゅうきゅう\",\n                    \"ひゃく\"),\n  meaning = as.character(0:100)\n  )\n\n# Sentence list ####\ndata_sentences1 <- read_excel(file_sentences1) \ndata_sentences2 <- read_excel(file_sentences2)\n\ndata_sentences <- rbind(data_sentences1, data_sentences2)\nrm(data_sentences1, data_sentences2)\n\n# Extract kana ####\n\nhiragana_chars <- intToUtf8(seq(12353, 12438)) # Unicode range for hiragana characters\nkatakana_chars <- intToUtf8(seq(12448, 12543)) # Unicode range for katakana characters\n\nkana <- paste0(hiragana_chars, katakana_chars) %>% \n  str_split_1(pattern = \"\") %>% \n  paste(collapse = \"|\")\n\nkana\n\n\n# All data ####\ndata_bind <- data_words %>% \n  rbind(data_sentences %>% select(word, pronunciation, meaning),\n        data_numbers,\n        data_jukugo) %>% \n  mutate(word = str_remove_all(word, \"[ a-zA-Z]\")) %>% \n  distinct(word, .keep_all = TRUE)\n\ndata_bind\n\n# Extract kanji ####\n\nall_kanji <- data_kanji %>% \n  select(kanji) %>% \n  rbind(data_bind %>% \n          mutate(kanji = word, .keep = \"none\")) %>% \n  mutate(kanji = str_remove_all(kanji, kana)) %>% \n  filter(kanji != \"\") %>% \n  pull() %>% \n  paste(collapse = \"\") %>% \n  str_split_1(pattern = \"\") %>% \n  unique()\n  \n## Separate individual kanji from all words ####\ndata_all <- data_bind %>% \n  mutate(kanji = str_remove_all(word, kana)) %>% \n  separate_wider_position(kanji, widths = c(\"kanji_1\" = 1, \n                                            \"kanji_2\" = 2,\n                                            \"kanji_3\" = 3,\n                                            \"kanji_4\" = 4,\n                                            \"kanji_5\" = 5),\n                          too_few = \"align_start\") %>% \n  filter(!is.na(kanji_1))\n\n\n\n# Functions ####\n\nmake_study_list <- function(kanji_learning) {\n  \n  # Select words with only those kanji\n  study_words <- data_all %>% \n    filter(kanji_1 %in% kanji_learning,  \n             kanji_2 %in% kanji_learning | is.na(kanji_2),\n             kanji_3 %in% kanji_learning | is.na(kanji_3),\n             kanji_4 %in% kanji_learning | is.na(kanji_4),\n             kanji_5 %in% kanji_learning | is.na(kanji_5)) %>% \n    select(!starts_with(\"kanji_\"))\n  \n  study_words\n}\n\n\nmake_sentences_list <- function(kanji_learning) {\n  \n  kanji_list <- paste(kanji_learning, collapse = \"|\")\n  \n  letters_lower <- paste(letters, collapse = \"|\")\n  letters_upper <- paste(LETTERS, collapse = \"|\")\n  numbers <- paste(0:9, collapse = \"|\")\n  symbols <- \"。|、|「|」|？|!|%|！|々\"\n  \n  other_characters <- paste(c(letters_lower, letters_upper, numbers, symbols), collapse = \"|\")\n  \n  sentences_list <- data_sentences %>% \n    mutate(only_kanji = str_remove_all(sentence, paste(kana, other_characters, sep = \"|\")),\n           unknown_kanji = str_remove_all(only_kanji, kanji_list)) %>% \n    filter(unknown_kanji == \"\", grepl(kanji_list, sentence)) %>% \n    select(sentence, sentence_hiragana, sentence_meaning)\n  \n  sentences_list\n  \n}\n```\n:::\n\n\nHere's a breakdown of the code:\n\n* TBD\n\n## Shiny App code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Shiny App ####\n\nui <- fluidPage(\n  \n  titlePanel(\"List Japanese Words Including Selected Kanji\"),\n  \n  sidebarLayout(\n    \n    sidebarPanel(\n      \n      downloadButton(\"downloadExcel\", \"Download Excel file\"),\n      downloadButton(\"downloadCSV\", \"Download CSV file\"),\n      selectInput (\"kanji_selected\", \"Select Kanji:\",  \n                  choices = all_kanji, multiple = TRUE)\n\n    ),\n    \n    mainPanel(\n      \n      tabsetPanel(\n        \n        tabPanel(\n          \"List of words\",\n          textOutput(\"n_kanji\"),\n          textOutput(\"n_words\"),\n          DTOutput(\"table_words\")\n          ),\n        \n        tabPanel(\n          \"List of sentences\",\n          textOutput(\"n_sentences\"),\n          DTOutput(\"table_sentences\")\n        ),\n        \n        tabPanel(\n          \"Stats\",\n          tableOutput(\"number_words_per_kanji\")\n        )\n      )\n      \n      \n    )\n  )\n)\n\nserver <- function(input, output) {\n  \n  # Reactive table words ####\n  rval_table_words <- reactive({\n    study_table <- make_study_list(input$kanji_selected)\n    study_table\n  })\n  \n  \n  # Reactive table sentences ####\n  rval_table_sentences <- reactive({\n    study_table <- make_sentences_list(input$kanji_selected)\n    study_table\n  })\n  \n  \n  # Reactive table counter ####\n  rval_table_counter <- reactive({\n    \n    study_words <- data_all %>% \n      filter(kanji_1 %in% input$kanji_selected, \n             kanji_2 %in% input$kanji_selected | is.na(kanji_2),\n             kanji_3 %in% input$kanji_selected | is.na(kanji_3),\n             kanji_4 %in% input$kanji_selected | is.na(kanji_4),\n             kanji_5 %in% input$kanji_selected | is.na(kanji_5))\n    \n    learning_length <- length(input$kanji_selected)\n    \n    kanji_counter <- c()\n    \n    for (i in 1:learning_length){\n      \n      kanji_counter[i] <- study_words %>% \n        filter(kanji_1 %in% input$kanji_selected[i] | \n                 kanji_2 %in% input$kanji_selected[i] | \n                 kanji_3 %in% input$kanji_selected[i] |\n                 kanji_4 %in% input$kanji_selected[i] | \n                 kanji_5 %in% input$kanji_selected[i] ) %>% \n        nrow()\n      \n    }\n    \n    table_counter <- data.frame(kanji = input$kanji_selected,\n                                times = kanji_counter)\n    \n    table_counter\n    \n  })\n  \n  # Reactive number kanji ####\n  rval_n_kanji <- reactive({\n    number_words <- length(input$kanji_selected)\n    number_words\n  }) \n  \n  \n  # Reactive number words ####\n  rval_n_words <- reactive({\n    study_table <- rval_table_words()\n    number_words <- nrow(study_table)\n    number_words\n  })\n  \n  # Reactive number sentences ####\n  rval_n_sentences <- reactive({\n    study_table <- rval_table_sentences()\n    number_sentences <- nrow(study_table)\n    number_sentences\n  })\n  \n  # output number words ####\n  output$n_words <- renderText({\n    n_words <- rval_n_words()\n    paste0(\"Number of words: \", n_words)\n  })\n  \n  # output number Kanji ####\n  output$n_kanji <- renderText({\n    number_kanji <- rval_n_kanji()\n    paste0(\"Number of kanji: \", number_kanji)\n  })\n  \n  # output number sentences ####\n  output$n_sentences <- renderText({\n    number_sentences <- rval_n_sentences()\n    paste0(\"Number of sentences: \", number_sentences)\n  })\n  \n  # output table words ####\n  output$table_words <- renderDT({\n    study_table <- rval_table_words()\n    study_table\n  })\n  \n  # output table sentences ####\n  output$table_sentences <- renderDT({\n    study_table <- rval_table_sentences()\n    study_table\n  })\n  \n  # output table counter ####\n  \n  output$number_words_per_kanji <- renderTable({\n    table_counter <- rval_table_counter()\n    table_counter\n  })\n  \n  # download Excel ####\n  \n  output$downloadExcel <- downloadHandler(\n    \n    filename = function() {\n      paste0(\"study_list_k\", rval_n_kanji(), \"_w\", rval_n_words(),\".xlsx\")\n    },\n    content = function(file) {\n      write_xlsx(rval_table_words(), file)\n      \n    })\n  \n  # download CSV ####\n  \n  output$downloadCSV <- downloadHandler(\n    \n    filename = function() {\n      paste0(\"study_list_k\", rval_n_kanji(), \"_w\", rval_n_words(),\".csv\")\n    },\n    content = function(file) {\n      write_csv(rval_table_words(), file)\n      \n    })\n\n}\n\n\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nHere's a breakdown of the code:\n\nTBD\n\n\n# References\n\n* [Kanji database](https://www.kanjidatabase.com/index.php).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}