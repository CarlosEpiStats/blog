{
  "hash": "522665743d128526d408385bf3c10acf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'PokéRogue Random Team Selector in R'\ndate: \"2024-06-22\"\ncategories: ['R', 'pokerogue', 'functions', 'project']\ndescription: \"Automate Your Pokémon Team Creation with R.\"\nexecute: \n  message: false\n  warning: false\neditor_options: \n  chunk_output_type: console\nformat: \n  html\n---\n\n\n# Introduction\n\nWelcome to the PokéRogue Random Team Selector project!\n\nPokéRogue is a fan-made roguelike game where players can select a team of up to 6 Starter Pokémon at the beginning of any run. Players have a total budget of either 10 or 15 points, depending on the game mode, to spend on these initial Starters. The more powerful the Pokémon, the more points they cost. Additionally, three random Starter Pokémon receive Pokérus each day, a condition that allows for faster experience gain and leveling up. Shiny Pokémon variants improve the player's luck in obtaining better items. You can play PokéRogue for free [here](https://pokerogue.net/).\n\n![PokéRogue Starter selection screen](images/clipboard-3954178997.png)\n\nIn this project, we will use R to create functions that randomly generate Pokémon teams based on the criteria mentioned above. We'll start by loading the necessary libraries and data, then proceed to define various helper functions and main team creation functions. Finally, we'll demonstrate how to create different teams using these functions.\n\n# Loading Libraries\n\nWe start by loading the necessary libraries using `pacman::p_load`. This ensures that all required packages are installed and loaded.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  tidyverse,\n  here,\n  rio\n)\n```\n:::\n\n\n# Loading Data\n\nNext, we load the dataset containing the list of available Pokémon. The data is imported from an Excel file using the `rio::import` function. This dataset includes information on whether the Pokémon has been caught, if it has a Shiny version, or if it has Pokérus.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_raw <- import(here(\"posts\", \"pokerogue_team\", \"Pokerogue starters list.xlsx\"))\n\ndata_catched <- data_raw |>\n  filter(Catched == \"Yes\") |>\n  select(Starter, Gen, Dex, Cost, Shiny, Pokerus)\n```\n:::\n\n\nLet's take a quick look at the imported data using `glimpse`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(data_catched)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 459\nColumns: 6\n$ Starter <chr> \"Bulbasaur\", \"Charmander\", \"Squirtle\", \"Caterpie\", \"Weedle\", \"…\n$ Gen     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Dex     <dbl> 1, 4, 7, 10, 13, 16, 19, 21, 23, 25, 27, 29, 32, 37, 39, 41, 4…\n$ Cost    <dbl> 3, 3, 3, 1, 1, 2, 1, 1, 2, 4, 2, 3, 3, 3, 4, 2, 2, 1, 2, 3, 4,…\n$ Shiny   <dbl> NA, NA, NA, NA, NA, NA, 1, 1, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ Pokerus <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\n# Creating Functions\n\nWe define several helper functions to handle different aspects of the team selection process.\n\n## Select Random Pokémon\n\nThe `select_random_pokemon` function is designed to select a Pokémon from the available dataset based on specific criteria such as budget points, Pokérus status, cost, or exact cost.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect_random_pokemon <- function(df, points, pokerus = FALSE, expensive = FALSE, exact = FALSE) {\n\n  # Selects an affordable Pokémon with Pokérus\n  if (pokerus == TRUE){\n      data_filtered <- df |> filter(Cost <= points, Pokerus == \"Yes\")\n  } \n  \n  # Selects an expensive Pókemon (all available points)\n  else if (expensive == TRUE) {\n      data_filtered <- df |> filter(Cost == min(points, max(Cost)))\n  }\n\n  # Selects a Pokémon with an exact cost\n  else if (exact == TRUE) {\n    data_filtered <- df |> filter(Cost == points)\n  }\n  \n  else {\n    data_filtered <- df |> filter(Cost <= points)\n  }\n  \n  pokemon_selected <- slice_sample(data_filtered)\n  pokemon_selected\n}\n```\n:::\n\n\n## Count Shiny Pokémon\n\nThe `count_shiny_pokemon` function counts the number of available shiny Pokémon in the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_shiny_pokemon <- function(df) {\n  data_filtered <- df |> filter(!is.na(Shiny))\n  n_shiny <- nrow(data_filtered)\n  n_shiny\n}\n```\n:::\n\n\n## Update Available Pokémon\n\nThe `update_available_pokemon` function updates the list of available Pokémon by removing the ones that have already been selected.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_available_pokemon <- function(data_available, list_pokemon, already_chosen, current_pokemon) {\n  new_pokemon_name <- list_pokemon[[current_pokemon]]$Starter\n  already_chosen <- c(already_chosen, new_pokemon_name)\n  data_available <- data_available |> filter(!Starter %in% already_chosen)\n  data_available\n}\n```\n:::\n\n\n## Update Budget\n\nThe `update_budget` function updates the remaining budget after selecting a Pokémon.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate_budget <- function(budget_points, list_pokemon, current_pokemon) {\n  points_spent <- sum(list_pokemon[[current_pokemon]]$Cost)\n  budget_points <- budget_points - points_spent\n}\n```\n:::\n\n\n## Select Shiny Pokémon\n\nThe `select_shiny_pokemon` function selects a shiny Pokémon based on the budget. It can prioritize rarer shiny Pokémon if specified.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect_shiny_pokemon <- function(df, points, best_shiny = TRUE) {\n  data_filtered <- df |> filter(Cost <= points, !is.na(Shiny))\n\n  if (best_shiny == TRUE) {\n    data_filtered <- data_filtered |>\n      mutate(random_number = rnorm(nrow(data_filtered))) |>\n      arrange(desc(Shiny), Cost, random_number) |>\n      select(-random_number)\n\n    pokemon_selected <- data_filtered |> slice_head(n = 1)\n  } else {\n    pokemon_selected <- data_filtered |> slice_sample(n = 1)\n  }\n}\n```\n:::\n\n\n## Distribute Points\n\nThe `distribute_points` function distributes the available points among the team members.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistribute_points <- function(points, n_pokemon = 6) {\n  distribution <- rep(1, n_pokemon)\n  points_left <- points - n_pokemon\n\n  if (points_left > 0) {\n    for (i in 1:points_left) {\n      pokemon_slot <- sample(1:n_pokemon, 1)\n      distribution[pokemon_slot] <- distribution[pokemon_slot] + 1\n    }\n  }\n\n  distribution <- sort(distribution, decreasing = TRUE)\n  distribution\n}\n```\n:::\n\n\n# Creating Teams\n\nWith the helper functions defined, we now create the main team selection functions.\n\n## Create Team\n\nThe `create_team` function creates a team based on the specified budget and criteria such as Pokérus and shiny Pokémon.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_team <- function(points, pokerus = FALSE, shiny = 0, best_shiny = TRUE, arrange = FALSE) {\n  # Set the starting budget\n  budget_points <- points\n\n  # Initialize empty lists and parameters\n  list_pokemon <- list()\n  current_pokemon <- 1\n  already_chosen <- c()\n  data_available <- data_catched\n\n  # First Pókemon, that may or may not be forced to be a Pokérus Pokémon\n  list_pokemon[[current_pokemon]] <- select_random_pokemon(data_available, budget_points, pokerus = pokerus)\n\n  # Update already chosen pokemon\n  data_available <- update_available_pokemon(data_available, list_pokemon, already_chosen, current_pokemon)\n\n  # Update disposible budget\n  budget_points <- update_budget(budget_points, list_pokemon, current_pokemon)\n\n  # Update current pókemon slot\n  current_pokemon <- current_pokemon + 1\n\n  # Find shiny Pókemon\n  if (shiny > 0) {\n    # Force a maximum of 6 Pókemon in the team, and calculate the number of shiny Pókemon to add\n    total_shiny_available <- count_shiny_pokemon(data_available)\n    number_of_shinies <- min(shiny, total_shiny_available)\n    end_loop <- min(6, number_of_shinies + current_pokemon - 1)\n\n    # Fill team with shiny Pókemon\n    for (i in current_pokemon:end_loop) {\n      list_pokemon[[i]] <- select_shiny_pokemon(data_available, budget_points, best_shiny)\n\n      # Update already chosen pokemon\n      data_available <- update_available_pokemon(data_available, list_pokemon, already_chosen, current_pokemon)\n\n      # Update disposible budget\n      budget_points <- update_budget(budget_points, list_pokemon, current_pokemon)\n\n      current_pokemon <- current_pokemon + 1\n    }\n\n    # Update current pókemon slot\n    team_after_shiny <- list_rbind(list_pokemon)\n    current_pokemon <- nrow(team_after_shiny) + 1\n  }\n\n  # Check if there are still places to fill in the team (until the 5th place)\n  if (current_pokemon <= 5 & budget_points > 0) {\n    # Loop for rest of max 6 Pókemon\n    for (i in current_pokemon:5) {\n      list_pokemon[[i]] <- select_random_pokemon(data_available, budget_points)\n\n      # Update already chosen pokemon\n      data_available <- update_available_pokemon(data_available, list_pokemon, already_chosen, current_pokemon)\n\n      # Update disposible budget\n      budget_points <- update_budget(budget_points, list_pokemon, current_pokemon)\n      current_pokemon <- current_pokemon + 1\n    }\n  }\n\n  # Ensure the last Pókemon spend all available points\n  if (current_pokemon == 6 & budget_points > 0) {\n    list_pokemon[[current_pokemon]] <- select_random_pokemon(data_available, budget_points, expensive = TRUE)\n  }\n\n  # Bind all Pókemon, in order of Generation and Dex number\n  final_team <- list_rbind(list_pokemon)\n\n  if (arrange == TRUE) {\n    final_team |>\n      arrange(Gen, Dex)\n  } else {\n    final_team\n  }\n}\n```\n:::\n\n\n## Create Expensive Team\n\nThe `create_expensive_team` function creates a team that maximizes the use of the available budget by selecting the most expensive Pokémon possible.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_expensive_team <- function(points, arrange = FALSE) {\n  # Set the starting budget\n  budget_points <- points\n\n  # Initialize empty lists and parameters\n  list_pokemon <- list()\n  current_pokemon <- 1\n  already_chosen <- c()\n  data_available <- data_catched\n\n  # Loop for rest of max 6 Pókemon\n  for (i in current_pokemon:6) {\n    list_pokemon[[i]] <- select_random_pokemon(data_available, budget_points, expensive = TRUE)\n\n    # Update already chosen pokemon\n    data_available <- update_available_pokemon(data_available, list_pokemon, already_chosen, current_pokemon)\n\n    # Update disposible budget\n    budget_points <- update_budget(budget_points, list_pokemon, current_pokemon)\n\n    current_pokemon <- current_pokemon + 1\n  }\n\n  # Bind all Pókemon, in order of Generation and Dex number\n\n  final_team <- list_rbind(list_pokemon)\n\n  if (arrange == TRUE) {\n    final_team |>\n      arrange(Gen, Dex)\n  } else {\n    final_team\n  }\n}\n```\n:::\n\n\n## Create Random 6 Team\n\nThe `create_random_6_team` function creates a team with a random distribution of points among the six Pokémon, optionally including a Pokérus Pokémon.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_random_6_team <- function(points, arrange = TRUE, pokerus = FALSE) {\n\n  # Set the starting budget\n  budget_points <- points\n  \n  # Initialize empty lists and parameters\n  list_pokemon <- list()\n  current_pokemon <- 1\n  already_chosen <- c()\n  data_available <- data_catched\n  \n  # Create a random distribution of points\n  distribution <- distribute_points(points, n_pokemon = 6)\n\n  # Coerce a Pokérus Pókemon\n  if (pokerus == TRUE){\n\n    pokerus_pokemon <-  data_available |> \n      filter(Pokerus == \"Yes\") |> \n      slice_sample(n = 1)\n    \n    list_pokemon[[current_pokemon]] <- pokerus_pokemon\n\n    # Update available\n    data_available <- update_available_pokemon(data_available, list_pokemon, already_chosen, current_pokemon)\n    budget_points <- update_budget(budget_points, list_pokemon, current_pokemon)\n    current_pokemon <- current_pokemon + 1\n\n    # Generate another distribution of points among the remaining 5 Pókemon\n    distribution <- c(\"NA\", distribute_points(budget_points, n_pokemon = 5))\n  }\n  \n  for (i in current_pokemon:6) {\n    # Find random pókemon according to the point distribution\n    list_pokemon[[i]] <- select_random_pokemon(data_available, distribution[i], exact = TRUE)\n    \n    # Update\n    data_available <- update_available_pokemon(data_available, list_pokemon, already_chosen, current_pokemon)\n    budget_points <- update_budget(budget_points, list_pokemon, current_pokemon)\n    current_pokemon <- current_pokemon + 1\n  }\n  \n  # Bind all Pókemon, in order of Generation and Dex number\n  final_team <- list_rbind(list_pokemon)\n  \n  if (arrange == TRUE) {\n    final_team |> arrange(Gen, Dex)\n  } else {\n    final_team\n  }\n}\n```\n:::\n\n\n# Random Team Examples\n\nNow that we have our functions defined, let's see them in action. Here are some examples of creating random Pokémon teams using different criteria.\n\n## Example 1: Basic Team with a Budget of 10 Points\n\nThis example creates a team with a budget of 10 points, without considering Pokérus or shiny variants, and arranges the team by Generation and Dex number.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_team(10, pokerus = FALSE, arrange = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Starter Gen Dex Cost Shiny Pokerus\n1 Hoothoot   2 163    1    NA    <NA>\n2   Hoppip   2 187    1    NA    <NA>\n3  Yveltal   6 717    8    NA    <NA>\n```\n\n\n:::\n:::\n\n\n## Example 2: Enhanced Team with a Budget of 15 Points\n\nIn this example, we create a team with a budget of 15 points, including Pokémon with Pokérus and up to 4 shiny Pokémon, prioritizing the best shiny variants. The team is also arranged by Generation and Dex number.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_team(15, pokerus = TRUE, shiny = 4, best_shiny = TRUE, arrange = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Starter Gen Dex Cost Shiny Pokerus\n1 Drowzee   1  96    3    NA     Yes\n2   Unown   2 201    1     1    <NA>\n3  Bidoof   4 399    1     2    <NA>\n4   Burmy   4 412    1     1    <NA>\n5    Uxie   4 480    7    NA    <NA>\n6 Petilil   5 548    2     2    <NA>\n```\n\n\n:::\n:::\n\n\n## Example 3: Most Expensive Team with a Budget of 15 Points\n\nHere, we create a team that maximizes the use of the budget by selecting the most expensive Pokémon available, with a total budget of 15 points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_expensive_team(15)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Starter Gen  Dex Cost Shiny Pokerus\n1   Giratina   4  487    8    NA    <NA>\n2 Iron Crown   9 1023    7    NA    <NA>\n```\n\n\n:::\n:::\n\n\n## Example 4: Random Team with a Budget of 10 Points\n\nThis example creates a random team with a budget of 10 points, including at least one Pokémon with Pokérus, and distributes the points randomly among the six Pokémon.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_random_6_team(10, pokerus = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Starter Gen Dex Cost Shiny Pokerus\n1    Weedle   1  13    1    NA    <NA>\n2   Spearow   1  21    1     1    <NA>\n3     Zubat   1  41    2    NA    <NA>\n4   Drowzee   1  96    3    NA     Yes\n5 Poochyena   3 261    2    NA    <NA>\n6    Bidoof   4 399    1     2    <NA>\n```\n\n\n:::\n:::\n\n\nThese examples demonstrate the flexibility and power of our team creation functions, allowing you to generate a variety of Pokémon teams tailored to your preferences and game mode. Whether you want a balanced team, a team with specific conditions, or the most powerful team possible within your budget, these functions can help you achieve that.\n\n# Conclusion\n\nWith these functions, you can generate a variety of Pokémon teams for your PokéRogue adventures. Whether you want a balanced team, a team with the most expensive Pokémon, or a team with specific conditions like Pokérus or shiny variants, these functions have you covered.\n\nHappy PokéRoguing!\n\n# References\n\n-   [PokéRogue game](https://pokerogue.net/).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}