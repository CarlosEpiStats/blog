---
title: 'COVID-19 Outbreak Report: An Example Using R'
date: "2024-03-12"
categories: ['R', 'report', 'Quarto']
description: "Using R Quarto to create a weekly outbreak situation report with fictitious COVID-19 data."
execute: 
  message: false
  warning: false
editor_options: 
  chunk_output_type: console
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
---


```{r load_libraries}
# install the latest version of the Epi R Handbook package
pacman::p_install_gh("appliedepi/epirhandbook")
# load the package for use
pacman::p_load(
  rio,
  tidyverse,
  here,
  epirhandbook,
  openxlsx,
  janitor,
  skimr,
  epikit
)
```

```{r custom_functions}
# Calculating age from two dates

calculate_age <- function(from, to) {
  # Convert dates to POSIXlt format
  from_lt <- as.POSIXlt(from)
  to_lt <- as.POSIXlt(to)

  # Get number of years of difference
  age <- to_lt$year - from_lt$year

  # Check if day and month in "to" date is later than in "from" date
  ifelse(to_lt$mon < from_lt$mon |
    (to_lt$mon == from_lt$mon & to_lt$mday < from_lt$mday),
  age - 1, age
  )
}
```


```{r loading_cleaning}
# Download file ####

file_url <- "https://raw.githubusercontent.com/appliedepi/epiRhandbook_eng/master/data/covid_example_data/covid_example_data.xlsx"
destination <- here("posts", "outbreak_report", "data", "outbreak_data.xlsx")
download.file(file_url, destination, mode = "wb")


# Load and clean file ####

data <- import(here("posts", "outbreak_report", "data", "outbreak_data.xlsx")) %>%
  # Standardize variable names
  clean_names() %>%
  # Remove ending "_false" in variable names
  rename_with(~ gsub("_false", "", .x)) %>%
  # De-duplicate
  distinct() %>% #  (0 duplicated rows)

  mutate(
    # Convert all "Unk" and "Unknown" in character variables to NA
    across(
      where(is.character) & !pid,
      ~ case_when(
        .x %in% c("Unk", "Unknown", "Unknown symptom status", "UNKNOWN", "NOT SPECIFIED", "Under Review", "Pending") ~ NA,
        TRUE ~ .x
      )
    ),

    # Simplify options for some variables
    sym_resolved = case_when(
      sym_resolved %in% c("Yes, date specified below", "Yes, date unknown") ~ "Yes",
      sym_resolved %in% c("No, still symptomatic") ~ "No"
    ),
    contact_id = case_when(
      contact_id %in% c("Yes-Symptomatic") ~ "Yes",
      contact_id %in% c("No-Asymptomatic") ~ "No"
    ),

    # Replace "YES" for "Yes"
    sym_myalgia = case_when(
      sym_myalgia == "YES" ~ "Yes",
      TRUE ~ sym_myalgia
    ),

    # Convert all character variables (except pid) into factors
    across(
      where(is.character) & !pid,
      ~ factor(.x)
    ),

    # Standardize answer order in all yes-no variables: first "Yes", then "No"
    across(
      where(is.factor) & !c(case_gender, case_race, case_eth, covid_dx),
      ~ factor(.x, levels = c("Yes", "No"))
    ),

    # Clean dates

    # Some dates of birth are later than the dates of report creation, which is impossible
    case_dob = case_when(
      case_dob > reprt_creationdt ~ NA,
      TRUE ~ case_dob
    ),


    # Recalculate ages with custom function which is more accurate
    age_recalc = calculate_age(from = case_dob, to = reprt_creationdt)
    # # Create age groups
    # age_cat = age_categories()
  )

# To-Do
# Clean symptoms start and end dates, report date, hospital_admision date, hospital discharche,
# death date
```


```{r explore_data}
data %>%
  glimpse()

data %>%
  skim()

ggplot(data, aes(x = case_age, y = age_recalc)) +
  geom_point()

cor(data$case_age, data$age_recalc, use = "complete.obs")

data %>%
  filter(case_age < 0) %>%
  View()

data %>%
  filter(sym_startdt > sym_resolveddt) %>%
  arrange(desc(sym_startdt)) %>%
  select(case_dob, reprt_creationdt, case_age, age_recalc, sym_startdt, sym_resolveddt)
```
